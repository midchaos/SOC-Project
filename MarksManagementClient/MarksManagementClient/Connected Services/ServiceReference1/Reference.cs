//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarksManagementClient.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserDetails", Namespace="http://schemas.datacontract.org/2004/07/MarksManagementLibrary")]
    [System.SerializableAttribute()]
    public partial class UserDetails : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIDField, value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MarksRecords", Namespace="http://schemas.datacontract.org/2004/07/MarksManagementLibrary")]
    [System.SerializableAttribute()]
    public partial class MarksRecords : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SemesterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Subject1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Subject2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Subject3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Semester {
            get {
                return this.SemesterField;
            }
            set {
                if ((this.SemesterField.Equals(value) != true)) {
                    this.SemesterField = value;
                    this.RaisePropertyChanged("Semester");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Subject1 {
            get {
                return this.Subject1Field;
            }
            set {
                if ((this.Subject1Field.Equals(value) != true)) {
                    this.Subject1Field = value;
                    this.RaisePropertyChanged("Subject1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Subject2 {
            get {
                return this.Subject2Field;
            }
            set {
                if ((this.Subject2Field.Equals(value) != true)) {
                    this.Subject2Field = value;
                    this.RaisePropertyChanged("Subject2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Subject3 {
            get {
                return this.Subject3Field;
            }
            set {
                if ((this.Subject3Field.Equals(value) != true)) {
                    this.Subject3Field = value;
                    this.RaisePropertyChanged("Subject3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIDField, value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IMarksManageService")]
    public interface IMarksManageService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarksManageService/Login", ReplyAction="http://tempuri.org/IMarksManageService/LoginResponse")]
        string Login(string ID, string DOB);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarksManageService/Login", ReplyAction="http://tempuri.org/IMarksManageService/LoginResponse")]
        System.Threading.Tasks.Task<string> LoginAsync(string ID, string DOB);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarksManageService/Register", ReplyAction="http://tempuri.org/IMarksManageService/RegisterResponse")]
        bool Register(MarksManagementClient.ServiceReference1.UserDetails user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarksManageService/Register", ReplyAction="http://tempuri.org/IMarksManageService/RegisterResponse")]
        System.Threading.Tasks.Task<bool> RegisterAsync(MarksManagementClient.ServiceReference1.UserDetails user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarksManageService/AddMarks", ReplyAction="http://tempuri.org/IMarksManageService/AddMarksResponse")]
        string AddMarks(MarksManagementClient.ServiceReference1.MarksRecords marks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarksManageService/AddMarks", ReplyAction="http://tempuri.org/IMarksManageService/AddMarksResponse")]
        System.Threading.Tasks.Task<string> AddMarksAsync(MarksManagementClient.ServiceReference1.MarksRecords marks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarksManageService/DeleteMarksRecordBySem", ReplyAction="http://tempuri.org/IMarksManageService/DeleteMarksRecordBySemResponse")]
        bool DeleteMarksRecordBySem(string ID, int sem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarksManageService/DeleteMarksRecordBySem", ReplyAction="http://tempuri.org/IMarksManageService/DeleteMarksRecordBySemResponse")]
        System.Threading.Tasks.Task<bool> DeleteMarksRecordBySemAsync(string ID, int sem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarksManageService/UpdateMarks", ReplyAction="http://tempuri.org/IMarksManageService/UpdateMarksResponse")]
        string UpdateMarks(string ID, int sem, int subNo, int marks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarksManageService/UpdateMarks", ReplyAction="http://tempuri.org/IMarksManageService/UpdateMarksResponse")]
        System.Threading.Tasks.Task<string> UpdateMarksAsync(string ID, int sem, int subNo, int marks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarksManageService/SearchByID", ReplyAction="http://tempuri.org/IMarksManageService/SearchByIDResponse")]
        MarksManagementClient.ServiceReference1.MarksRecords[] SearchByID(string ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarksManageService/SearchByID", ReplyAction="http://tempuri.org/IMarksManageService/SearchByIDResponse")]
        System.Threading.Tasks.Task<MarksManagementClient.ServiceReference1.MarksRecords[]> SearchByIDAsync(string ID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMarksManageServiceChannel : MarksManagementClient.ServiceReference1.IMarksManageService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MarksManageServiceClient : System.ServiceModel.ClientBase<MarksManagementClient.ServiceReference1.IMarksManageService>, MarksManagementClient.ServiceReference1.IMarksManageService {
        
        public MarksManageServiceClient() {
        }
        
        public MarksManageServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MarksManageServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MarksManageServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MarksManageServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Login(string ID, string DOB) {
            return base.Channel.Login(ID, DOB);
        }
        
        public System.Threading.Tasks.Task<string> LoginAsync(string ID, string DOB) {
            return base.Channel.LoginAsync(ID, DOB);
        }
        
        public bool Register(MarksManagementClient.ServiceReference1.UserDetails user) {
            return base.Channel.Register(user);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterAsync(MarksManagementClient.ServiceReference1.UserDetails user) {
            return base.Channel.RegisterAsync(user);
        }
        
        public string AddMarks(MarksManagementClient.ServiceReference1.MarksRecords marks) {
            return base.Channel.AddMarks(marks);
        }
        
        public System.Threading.Tasks.Task<string> AddMarksAsync(MarksManagementClient.ServiceReference1.MarksRecords marks) {
            return base.Channel.AddMarksAsync(marks);
        }
        
        public bool DeleteMarksRecordBySem(string ID, int sem) {
            return base.Channel.DeleteMarksRecordBySem(ID, sem);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteMarksRecordBySemAsync(string ID, int sem) {
            return base.Channel.DeleteMarksRecordBySemAsync(ID, sem);
        }
        
        public string UpdateMarks(string ID, int sem, int subNo, int marks) {
            return base.Channel.UpdateMarks(ID, sem, subNo, marks);
        }
        
        public System.Threading.Tasks.Task<string> UpdateMarksAsync(string ID, int sem, int subNo, int marks) {
            return base.Channel.UpdateMarksAsync(ID, sem, subNo, marks);
        }
        
        public MarksManagementClient.ServiceReference1.MarksRecords[] SearchByID(string ID) {
            return base.Channel.SearchByID(ID);
        }
        
        public System.Threading.Tasks.Task<MarksManagementClient.ServiceReference1.MarksRecords[]> SearchByIDAsync(string ID) {
            return base.Channel.SearchByIDAsync(ID);
        }
    }
}
